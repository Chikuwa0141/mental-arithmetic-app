generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD/ERD.svg"
}
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model AuthSession {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  sessions Session[]  
  accounts  Account[] //NextAuth用
  authSessions AuthSession[]  //NextAuth用
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        Int      @id @default(autoincrement())
  user       User    @relation(fields: [userId], references: [id])
  userId    Int
  questionCount Int
  condition String? //任意：高ストレス、安静状態など
  answers   Answer[]
  createdAt DateTime @default(now())
}

model Answer{
  id        Int      @id @default(autoincrement())
  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId Int
  question  String
  answer    String
  correct   Boolean
  answeredAt DateTime 
}